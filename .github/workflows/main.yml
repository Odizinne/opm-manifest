name: Generate Manifest JSON

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'

jobs:
  create-manifest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch Release Info and Generate JSON Manifest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # List of repository API URLs
          urls=(
            "https://api.github.com/repos/odizinne/globalmicmute/releases/latest"
            "https://api.github.com/repos/odizinne/bigpicturetv/releases/latest"
            "https://api.github.com/repos/odizinne/headsetcontrol-qt/releases/latest"
            "https://api.github.com/repos/odizinne/QMS/releases/latest"
            "https://api.github.com/repos/odizinne/AutoSceneSwitcher/releases/latest"
            "https://api.github.com/repos/odizinne/steamshine/releases/latest"
            "https://api.github.com/repos/odizinne/mousereactivergb/releases/latest"
            "https://api.github.com/repos/odizinne/openrgb-installer/releases/latest"
            "https://api.github.com/repos/odizinne/makesense/releases/latest"
          )

          # Initialize an empty array to store JSON objects
          json_array=()

          for url in "${urls[@]}"; do
            # Fetch the latest release data from the GitHub API
            response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$url")

            # Extract project name and version
            project_name=$(echo $response | jq -r '.url' | awk -F"/" '{print $(NF-2)}')
            version=$(echo $response | jq -r '.tag_name')

            # Initialize download_url as empty
            download_url=""

            # Loop through assets to find the first valid asset that does not contain "linux"
            for asset in $(echo $response | jq -c '.assets[]'); do
              asset_name=$(echo $asset | jq -r '.name')
              if [[ ! "$asset_name" =~ "linux" ]]; then
                download_url=$(echo $asset | jq -r '.browser_download_url')
                break
              fi
            done

            # Only add to array if a valid download_url was found
            if [[ -n "$download_url" ]]; then
              json_object="{\"project_name\": \"$project_name\", \"version\": \"$version\", \"url\": \"$download_url\"}"
              json_array+=("$json_object")
            fi
          done

          # Convert array to JSON and sort by project_name
          json_content=$(printf '%s\n' "${json_array[@]}" | jq -s 'sort_by(.project_name)')

          # Write sorted JSON array to manifest.json
          echo $json_content | jq '.' > manifest.json

      - name: Commit and Push Manifest JSON
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are any changes to commit
          if [[ -n "$(git status --porcelain)" ]]; then
            git add manifest.json
            git commit -m "updated manifest.json"
            git push
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
